#!/usr/bin/env python3
"""
File Upload API Endpoint
X·ª≠ l√Ω upload file v√† embedding v√†o vector database
"""

from fastapi import APIRouter, HTTPException, UploadFile, File, Form, BackgroundTasks
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
import logging
import os
import shutil
import asyncio
from pathlib import Path
import uuid
from datetime import datetime

from app.core.config import settings
from app.utils.rag_utils import FileUtils
from app.services.embedding_service import EmbeddingService

logger = logging.getLogger(__name__)

router = APIRouter()

# Pydantic Models
class UploadResponse(BaseModel):
    """Response model cho upload file"""
    success: bool
    message: str
    filename: str
    file_id: str
    file_size: int
    upload_time: str
    status: str = "uploaded"  # uploaded, processing, embedded, error

class EmbeddingStatus(BaseModel):
    """Status c·ªßa qu√° tr√¨nh embedding"""
    file_id: str
    filename: str
    status: str  # processing, completed, error
    progress: int = 0  # 0-100
    message: str = ""
    embedding_time: Optional[str] = None

class FileInfo(BaseModel):
    """Th√¥ng tin file"""
    file_id: str
    filename: str
    size: int
    size_mb: float
    extension: str
    uploaded_at: str
    status: str
    is_embedded: bool = False

class AllFilesResponse(BaseModel):
    """Response cho t·∫•t c·∫£ files trong documents"""
    recent_uploads: List[FileInfo]
    all_files: Dict[str, List[Dict[str, Any]]]
    total_files: int
    categories: Dict[str, int]

# Utility functions
def ensure_upload_directory():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c upload t·ªìn t·∫°i"""
    upload_dir = Path(settings.DOCUMENTS_UPLOAD_DIR)
    upload_dir.mkdir(parents=True, exist_ok=True)
    return upload_dir

def validate_file_type(filename: str) -> bool:
    """Ki·ªÉm tra lo·∫°i file c√≥ ƒë∆∞·ª£c ph√©p kh√¥ng"""
    allowed_extensions = {".pdf", ".doc", ".docx", ".txt"}
    file_extension = Path(filename).suffix.lower()
    return file_extension in allowed_extensions

def get_file_size_mb(size_bytes: int) -> float:
    """Chuy·ªÉn ƒë·ªïi size t·ª´ bytes sang MB"""
    return round(size_bytes / (1024 * 1024), 2)

async def process_file_embedding(file_path: str, file_id: str, filename: str):
    """
    X·ª≠ l√Ω embedding file trong background
    """
    try:
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu embedding file: {filename} (ID: {file_id})")
        
        # Kh·ªüi t·∫°o embedding service
        embedding_service = EmbeddingService(
            model_path=settings.EMBEDDING_MODEL_PATH,
            output_dir=settings.VECTOR_STORE_PATH
        )
        
        # Load model n·∫øu ch∆∞a c√≥
        if embedding_service.model is None:
            embedding_service.load_model()
        
        # X·ª≠ l√Ω document ƒë·ªÉ t·∫°o embeddings
        result = embedding_service.process_document(
            doc_path=file_path,
            chunk_size=settings.CHUNK_SIZE,
            overlap=settings.CHUNK_OVERLAP
        )
        
        if result and result.get("status") == "success":
            logger.info(f"‚úÖ Ho√†n th√†nh embedding file: {filename} (ID: {file_id})")
            logger.info(f"   - S·ªë chunks: {result['num_chunks']}")
            logger.info(f"   - Embedding shape: {result['embedding_shape']}")
        else:
            logger.error(f"‚ùå L·ªói embedding file {filename}: {result.get('error', 'Unknown error')}")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói embedding file {filename}: {e}")

@router.post("/upload", response_model=UploadResponse,
             summary="Upload File", 
             description="Upload file PDF, DOC, TXT v√† t·ª± ƒë·ªông embedding")
async def upload_file(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(..., description="File c·∫ßn upload (PDF, DOC, DOCX, TXT)")
):
    """
    **Upload File v·ªõi Auto Embedding**
    
    T√≠nh nƒÉng:
    - Ch·ªâ ch·∫•p nh·∫≠n file PDF, DOC, DOCX, TXT
    - Ki·ªÉm tra k√≠ch th∆∞·ªõc file (t·ªëi ƒëa 10MB)
    - L∆∞u file v√†o th∆∞ m·ª•c upload
    - T·ª± ƒë·ªông embedding v√†o vector database
    - Tr·∫£ v·ªÅ th√¥ng tin file v√† status
    
    **Quy tr√¨nh:**
    1. Validate file type v√† size
    2. T·∫°o file ID unique
    3. L∆∞u file v√†o th∆∞ m·ª•c upload
    4. B·∫Øt ƒë·∫ßu qu√° tr√¨nh embedding (background)
    5. Tr·∫£ v·ªÅ response v·ªõi file info
    """
    try:
        # Validate file type
        if not validate_file_type(file.filename):
            raise HTTPException(
                status_code=400, 
                detail="Ch·ªâ ch·∫•p nh·∫≠n file PDF, DOC, DOCX, TXT"
            )
        
        # Validate file size
        if file.size > settings.MAX_FILE_SIZE:
            raise HTTPException(
                status_code=400,
                detail=f"File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa: {settings.MAX_FILE_SIZE / (1024*1024):.1f}MB"
            )
        
        # T·∫°o file ID unique
        file_id = str(uuid.uuid4())
        
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c upload t·ªìn t·∫°i
        upload_dir = ensure_upload_directory()
        
        # T·∫°o t√™n file v·ªõi timestamp ƒë·ªÉ tr√°nh conflict
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_filename = f"{timestamp}_{file.filename}"
        file_path = upload_dir / safe_filename
        
        # L∆∞u file
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # L·∫•y th√¥ng tin file
        file_size_mb = get_file_size_mb(file.size)
        upload_time = datetime.now().isoformat()
        
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh embedding trong background
        background_tasks.add_task(
            process_file_embedding, 
            str(file_path), 
            file_id, 
            file.filename
        )
        
        logger.info(f"‚úÖ File uploaded: {file.filename} -> {file_path} (ID: {file_id})")
        
        return UploadResponse(
            success=True,
            message=f"File {file.filename} ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng",
            filename=file.filename,
            file_id=file_id,
            file_size=file.size,
            upload_time=upload_time,
            status="uploaded"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Upload error: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói upload file: {str(e)}")

@router.get("/files/uploaded", response_model=List[FileInfo],
            summary="L·∫•y danh s√°ch files ƒë√£ upload",
            description="L·∫•y danh s√°ch t·∫•t c·∫£ files trong th∆∞ m·ª•c upload")
async def get_uploaded_files():
    """
    **L·∫•y danh s√°ch files ƒë√£ upload**
    
    Tr·∫£ v·ªÅ:
    - Danh s√°ch t·∫•t c·∫£ files trong th∆∞ m·ª•c upload
    - Th√¥ng tin chi ti·∫øt: size, extension, upload time
    - Status embedding
    """
    try:
        upload_dir = Path(settings.DOCUMENTS_UPLOAD_DIR)
        
        if not upload_dir.exists():
            return []
        
        # Kh·ªüi t·∫°o embedding service ƒë·ªÉ ki·ªÉm tra status
        embedding_service = EmbeddingService(
            model_path=settings.EMBEDDING_MODEL_PATH,
            output_dir=settings.VECTOR_STORE_PATH
        )
        
        files = []
        for file_path in upload_dir.iterdir():
            if file_path.is_file():
                stat = file_path.stat()
                
                # Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c embedding ch∆∞a
                is_embedded = embedding_service.is_document_embedded(str(file_path))
                
                files.append(FileInfo(
                    file_id=str(uuid.uuid4()),  # TODO: L∆∞u file_id th·ª±c t·∫ø
                    filename=file_path.name,
                    size=stat.st_size,
                    size_mb=get_file_size_mb(stat.st_size),
                    extension=file_path.suffix.lower(),
                    uploaded_at=datetime.fromtimestamp(stat.st_mtime).isoformat(),
                    status="embedded" if is_embedded else "uploaded",
                    is_embedded=is_embedded
                ))
        
        # S·∫Øp x·∫øp theo th·ªùi gian upload (m·ªõi nh·∫•t tr∆∞·ªõc)
        files.sort(key=lambda x: x.uploaded_at, reverse=True)
        
        return files
        
    except Exception as e:
        logger.error(f"‚ùå Error getting files: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y danh s√°ch file: {str(e)}")

@router.get("/files/all", response_model=AllFilesResponse,
            summary="L·∫•y t·∫•t c·∫£ files trong documents",
            description="L·∫•y danh s√°ch t·∫•t c·∫£ files t·ª´ c√°c th∆∞ m·ª•c documents")
async def get_all_files():
    """
    **L·∫•y t·∫•t c·∫£ files trong documents**
    
    Tr·∫£ v·ªÅ:
    - Files upload g·∫ßn ƒë√¢y (10 files)
    - T·∫•t c·∫£ files theo danh m·ª•c (Luat, TaiLieuTiengAnh, TaiLieuTiengViet, upload)
    - Th·ªëng k√™ s·ªë l∆∞·ª£ng files
    """
    try:
        # ƒê·ªãnh nghƒ©a c√°c th∆∞ m·ª•c documents
        document_dirs = {
            "Lu·∫≠t": settings.LUAT_DOCS_PATH,
            "T√†i li·ªáu Ti·∫øng Anh": settings.ENGLISH_DOCS_PATH,
            "T√†i li·ªáu Ti·∫øng Vi·ªát": settings.VIETNAMESE_DOCS_PATH,
            "Files Upload": settings.DOCUMENTS_UPLOAD_DIR
        }
        
        all_files = {}
        total_files = 0
        categories = {}
        recent_uploads = []
        
        # Kh·ªüi t·∫°o embedding service ƒë·ªÉ ki·ªÉm tra status
        embedding_service = EmbeddingService(
            model_path=settings.EMBEDDING_MODEL_PATH,
            output_dir=settings.VECTOR_STORE_PATH
        )
        
        # Duy·ªát qua t·ª´ng th∆∞ m·ª•c
        for category, dir_path in document_dirs.items():
            category_files = []
            category_count = 0
            
            if Path(dir_path).exists():
                for file_path in Path(dir_path).iterdir():
                    if file_path.is_file() and validate_file_type(file_path.name):
                        stat = file_path.stat()
                        is_embedded = embedding_service.is_document_embedded(str(file_path))
                        
                        file_info = {
                            "filename": file_path.name,
                            "size": stat.st_size,
                            "size_mb": get_file_size_mb(stat.st_size),
                            "extension": file_path.suffix.lower(),
                            "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                            "path": str(file_path),
                            "category": category,
                            "is_embedded": is_embedded,
                            "status": "embedded" if is_embedded else "not_embedded"
                        }
                        
                        category_files.append(file_info)
                        category_count += 1
                        
                        # N·∫øu l√† file upload g·∫ßn ƒë√¢y, th√™m v√†o recent_uploads
                        if category == "Files Upload":
                            recent_uploads.append(FileInfo(
                                file_id=str(uuid.uuid4()),
                                filename=file_path.name,
                                size=stat.st_size,
                                size_mb=get_file_size_mb(stat.st_size),
                                extension=file_path.suffix.lower(),
                                uploaded_at=datetime.fromtimestamp(stat.st_mtime).isoformat(),
                                status="embedded" if is_embedded else "uploaded",
                                is_embedded=is_embedded
                            ))
            
            # S·∫Øp x·∫øp files theo th·ªùi gian modified (m·ªõi nh·∫•t tr∆∞·ªõc)
            category_files.sort(key=lambda x: x['modified'], reverse=True)
            
            all_files[category] = category_files
            categories[category] = category_count
            total_files += category_count
        
        # S·∫Øp x·∫øp recent_uploads v√† ch·ªâ l·∫•y 10 files g·∫ßn nh·∫•t
        recent_uploads.sort(key=lambda x: x.uploaded_at, reverse=True)
        recent_uploads = recent_uploads[:10]
        
        return AllFilesResponse(
            recent_uploads=recent_uploads,
            all_files=all_files,
            total_files=total_files,
            categories=categories
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error getting all files: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y t·∫•t c·∫£ files: {str(e)}")

@router.get("/status/{file_id}", response_model=EmbeddingStatus,
            summary="Ki·ªÉm tra status embedding",
            description="Ki·ªÉm tra tr·∫°ng th√°i qu√° tr√¨nh embedding c·ªßa file")
async def get_embedding_status(file_id: str):
    """
    **Ki·ªÉm tra status embedding file**
    
    Tr·∫£ v·ªÅ:
    - Tr·∫°ng th√°i hi·ªán t·∫°i (processing, completed, error)
    - Ti·∫øn tr√¨nh embedding (0-100%)
    - Th√¥ng b√°o chi ti·∫øt
    """
    try:
        # TODO: Implement status checking logic
        # T·∫°m th·ªùi tr·∫£ v·ªÅ status m·∫∑c ƒë·ªãnh
        
        return EmbeddingStatus(
            file_id=file_id,
            filename="unknown",  # TODO: L·∫•y t·ª´ database/cache
            status="processing",
            progress=50,
            message="ƒêang x·ª≠ l√Ω embedding...",
            embedding_time=None
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error checking status: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói ki·ªÉm tra status: {str(e)}")

@router.delete("/files/{file_id}",
               summary="X√≥a file",
               description="X√≥a file kh·ªèi th∆∞ m·ª•c upload")
async def delete_file(file_id: str):
    """
    **X√≥a file**
    
    X√≥a file kh·ªèi th∆∞ m·ª•c upload v√† vector database
    """
    try:
        # TODO: Implement file deletion logic
        # 1. T√¨m file theo file_id
        # 2. X√≥a file t·ª´ filesystem
        # 3. X√≥a vector embeddings li√™n quan
        
        return {"message": f"File {file_id} ƒë√£ ƒë∆∞·ª£c x√≥a", "success": True}
        
    except Exception as e:
        logger.error(f"‚ùå Error deleting file: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói x√≥a file: {str(e)}")

@router.get("/health",
            summary="Health Check",
            description="Ki·ªÉm tra tr·∫°ng th√°i file upload service")
async def health_check():
    """
    **Health Check File Upload Service**
    """
    try:
        upload_dir = Path(settings.DOCUMENTS_UPLOAD_DIR)
        
        return {
            "status": "healthy",
            "service": "File Upload",
            "upload_dir": str(upload_dir),
            "upload_dir_exists": upload_dir.exists(),
            "max_file_size_mb": settings.MAX_FILE_SIZE / (1024*1024),
            "allowed_extensions": [".pdf", ".doc", ".docx", ".txt"]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Health check error: {e}")
        return {
            "status": "unhealthy",
            "service": "File Upload",
            "error": str(e)
        }
