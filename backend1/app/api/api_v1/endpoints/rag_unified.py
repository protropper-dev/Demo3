#!/usr/bin/env python3
"""
RAG Unified API Endpoint - Core RAG functionality only
"""

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
import logging

from app.services.rag_service_unified import get_rag_service_unified

logger = logging.getLogger(__name__)

router = APIRouter()

# Pydantic Models
class UnifiedQueryRequest(BaseModel):
    """Request model cho unified query API"""
    question: str = Field(..., description="C√¢u h·ªèi c·∫ßn tr·∫£ l·ªùi", min_length=1, max_length=1000)
    top_k: Optional[int] = Field(default=5, description="S·ªë l∆∞·ª£ng ngu·ªìn t√†i li·ªáu t·ªëi ƒëa", ge=1, le=20)
    filter_category: Optional[str] = Field(default=None, description="L·ªçc theo danh m·ª•c: 'luat', 'english', 'vietnamese', 'all'")
    include_sources: Optional[bool] = Field(default=True, description="C√≥ bao g·ªìm th√¥ng tin ngu·ªìn t√†i li·ªáu kh√¥ng")
    similarity_threshold: Optional[float] = Field(default=None, description="Ng∆∞·ª°ng ƒë·ªô t∆∞∆°ng ƒë·ªìng t·ªëi thi·ªÉu", ge=0.0, le=1.0)
    use_enhancement: Optional[bool] = Field(default=True, description="S·ª≠ d·ª•ng LLM enhancement ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng response")

class SourceInfo(BaseModel):
    """Th√¥ng tin ngu·ªìn t√†i li·ªáu"""
    filename: str
    display_name: str
    category: str
    content_preview: str
    similarity_score: float
    content_length: int

class UnifiedQueryResponse(BaseModel):
    """Response model cho unified query API"""
    question: str
    answer: str
    sources: List[SourceInfo]
    total_sources: int
    confidence: float = Field(..., description="ƒê·ªô tin c·∫≠y c·ªßa c√¢u tr·∫£ l·ªùi (0-1)")
    method: str = Field(..., description="Ph∆∞∆°ng ph√°p t·∫°o c√¢u tr·∫£ l·ªùi")
    processing_time_ms: int
    filter_category: str
    timestamp: str
    service_version: str
    enhancement_applied: Optional[bool] = Field(default=False, description="C√≥ √°p d·ª•ng LLM enhancement kh√¥ng")
    original_response: Optional[str] = Field(default=None, description="Response g·ªëc tr∆∞·ªõc khi enhancement")

class ServiceStats(BaseModel):
    """Th·ªëng k√™ service"""
    service_name: str
    version: str
    status: str
    total_documents: int
    total_chunks: int
    categories: Dict[str, Any]
    device: str
    default_settings: Dict[str, Any]

# Core RAG models only

@router.post("/query", response_model=UnifiedQueryResponse, 
             summary="Query RAG Unified", 
             description="API duy nh·∫•t ƒë·ªÉ h·ªèi ƒë√°p v·ªõi to√†n b·ªô t√†i li·ªáu ƒë√£ embedding")
async def unified_query(request: UnifiedQueryRequest):
    """
    **API Th·ªëng nh·∫•t cho Query/Response RAG**
    
    ƒê√¢y l√† API duy nh·∫•t ƒë·ªÉ:
    - G·ª≠i c√¢u h·ªèi v√† nh·∫≠n c√¢u tr·∫£ l·ªùi t·ª´ to√†n b·ªô knowledge base
    - T√¨m ki·∫øm trong t·∫•t c·∫£ t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c embedding
    - L·ªçc theo danh m·ª•c t√†i li·ªáu
    - ƒêi·ªÅu ch·ªânh ƒë·ªô ch√≠nh x√°c v√† s·ªë l∆∞·ª£ng ngu·ªìn
    
    **Categories:**
    - `luat`: T√†i li·ªáu lu·∫≠t ph√°p Vi·ªát Nam
    - `english`: T√†i li·ªáu ti·∫øng Anh (NIST, ISO)
    - `vietnamese`: T√†i li·ªáu ti·∫øng Vi·ªát
    - `all` ho·∫∑c `null`: T·∫•t c·∫£ t√†i li·ªáu
    
    **V√≠ d·ª• c√¢u h·ªèi:**
    - "An to√†n th√¥ng tin l√† g√¨?"
    - "Lu·∫≠t An to√†n th√¥ng tin quy ƒë·ªãnh g√¨?"
    - "ISO 27001 c√≥ nh·ªØng y√™u c·∫ßu n√†o?"
    - "C√°c bi·ªán ph√°p b·∫£o m·∫≠t c∆° b·∫£n?"
    """
    try:
        logger.info(f"üìù Unified query: {request.question[:100]}...")
        
        # Get RAG service
        rag_service = await get_rag_service_unified()
        
        # Process query
        result = await rag_service.query(
            question=request.question,
            top_k=request.top_k,
            filter_category=request.filter_category,
            include_sources=request.include_sources,
            similarity_threshold=request.similarity_threshold,
            use_enhancement=request.use_enhancement
        )
        
        # Convert to response model
        sources = [SourceInfo(**source) for source in result.get('sources', [])]
        
        response = UnifiedQueryResponse(
            question=result['question'],
            answer=result['answer'],
            sources=sources,
            total_sources=result['total_sources'],
            confidence=result.get('confidence', 0.0),
            method=result.get('method', 'unified'),
            processing_time_ms=result.get('processing_time_ms', 0),
            filter_category=result.get('filter_category', 'all'),
            timestamp=result.get('timestamp', ''),
            service_version=result.get('service_version', '2.0.0'),
            enhancement_applied=result.get('enhancement_applied', False),
            original_response=result.get('original_response', None)
        )
        
        logger.info(f"‚úÖ Query processed: {response.total_sources} sources, {response.processing_time_ms}ms")
        return response
        
    except ValueError as e:
        logger.error(f"‚ùå Validation error: {e}")
        raise HTTPException(status_code=400, detail=f"L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o: {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå Unified query error: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}")

@router.get("/stats", response_model=ServiceStats,
            summary="Service Statistics",
            description="L·∫•y th·ªëng k√™ chi ti·∫øt v·ªÅ RAG service")
async def get_service_stats():
    """
    **Th·ªëng k√™ RAG Service**
    
    Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ:
    - S·ªë l∆∞·ª£ng t√†i li·ªáu v√† chunks
    - Ph√¢n b·ªë theo danh m·ª•c
    - C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    - Tr·∫°ng th√°i service
    """
    try:
        rag_service = await get_rag_service_unified()
        stats = await rag_service.get_service_stats()
        
        return ServiceStats(
            service_name=stats['service_name'],
            version=stats['version'],
            status=stats['status'],
            total_documents=stats['total_documents'],
            total_chunks=stats['total_chunks'],
            categories=stats['categories'],
            device=stats['device'],
            default_settings=stats['default_settings']
        )
        
    except Exception as e:
        logger.error(f"‚ùå Stats error: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y th·ªëng k√™: {str(e)}")

@router.get("/health",
            summary="Health Check",
            description="Ki·ªÉm tra tr·∫°ng th√°i s·ª©c kh·ªèe c·ªßa RAG service")
async def health_check():
    """
    **Health Check**
    
    Ki·ªÉm tra:
    - Service c√≥ s·∫µn s√†ng kh√¥ng
    - Th·ªùi gian kh·ªüi t·∫°o
    - Th√¥ng tin c∆° b·∫£n
    """
    try:
        rag_service = await get_rag_service_unified()
        stats = await rag_service.get_service_stats()
        
        return {
            "status": "healthy",
            "service": "RAG Unified",
            "version": "1.0.0",
            "ready": stats.get('status') == 'ready',
            "total_documents": stats.get('total_documents', 0),
            "total_chunks": stats.get('total_chunks', 0),
            "initialization_time": stats.get('initialization_time', 0)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Health check error: {e}")
        return {
            "status": "unhealthy",
            "service": "RAG Unified",
            "version": "1.0.0",
            "error": str(e)
        }

@router.get("/categories",
            summary="Available Categories",
            description="L·∫•y danh s√°ch c√°c danh m·ª•c t√†i li·ªáu c√≥ s·∫µn")
async def get_categories():
    """
    **Danh m·ª•c t√†i li·ªáu c√≥ s·∫µn**
    
    Tr·∫£ v·ªÅ danh s√°ch c√°c category c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªÉ filter
    """
    try:
        rag_service = await get_rag_service_unified()
        stats = await rag_service.get_service_stats()
        
        categories = []
        for cat_id, cat_info in stats.get('categories', {}).items():
            categories.append({
                'id': cat_id,
                'name': {
                    'luat': 'Lu·∫≠t ph√°p Vi·ªát Nam',
                    'english': 'T√†i li·ªáu ti·∫øng Anh',
                    'vietnamese': 'T√†i li·ªáu ti·∫øng Vi·ªát'
                }.get(cat_id, cat_id.title()),
                'chunks': cat_info.get('chunks', 0),
                'total_length': cat_info.get('total_length', 0)
            })
        
        return {
            'categories': categories,
            'total_categories': len(categories),
            'note': 'S·ª≠ d·ª•ng filter_category="all" ƒë·ªÉ t√¨m trong t·∫•t c·∫£ danh m·ª•c'
        }
        
    except Exception as e:
        logger.error(f"‚ùå Categories error: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y danh m·ª•c: {str(e)}")

# Compatibility endpoint (deprecated)
@router.post("/query/simple", 
             deprecated=True,
             summary="[DEPRECATED] Simple Query",
             description="S·ª≠ d·ª•ng /query thay th·∫ø")
async def simple_query_deprecated(question: str = Query(..., description="C√¢u h·ªèi")):
    """Endpoint t∆∞∆°ng th√≠ch ng∆∞·ª£c - khuy·∫øn ngh·ªã s·ª≠ d·ª•ng /query"""
    request = UnifiedQueryRequest(question=question)
    return await unified_query(request)

@router.get("/info",
            summary="Service Information", 
            description="Th√¥ng tin t·ªïng quan v·ªÅ RAG Unified API")
async def service_info():
    """
    **Th√¥ng tin RAG Unified API**
    
    API duy nh·∫•t ƒë·ªÉ truy v·∫•n to√†n b·ªô knowledge base
    """
    return {
        "name": "RAG Unified API",
        "version": "1.0.0",
        "description": "API th·ªëng nh·∫•t cho query/response t·ª´ to√†n b·ªô t√†i li·ªáu ƒë√£ embedding",
        "main_endpoint": "/api/v1/rag/query",
        "features": [
            "T√¨m ki·∫øm th√¥ng minh v·ªõi embedding vectors",
            "L·ªçc theo danh m·ª•c t√†i li·ªáu", 
            "ƒêi·ªÅu ch·ªânh ƒë·ªô ch√≠nh x√°c v√† s·ªë l∆∞·ª£ng k·∫øt qu·∫£",
            "Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi chi ti·∫øt v·ªõi ngu·ªìn tham kh·∫£o",
            "Th·ªëng k√™ v√† monitoring"
        ],
        "supported_categories": ["luat", "english", "vietnamese", "all"],
        "example_questions": [
            "An to√†n th√¥ng tin l√† g√¨?",
            "Lu·∫≠t An to√†n th√¥ng tin quy ƒë·ªãnh g√¨?", 
            "ISO 27001 c√≥ nh·ªØng y√™u c·∫ßu n√†o?",
            "C√°c bi·ªán ph√°p b·∫£o m·∫≠t c∆° b·∫£n?"
        ]
    }

# End of core RAG endpoints
